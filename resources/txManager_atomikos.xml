<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
   
 	<bean id="dataSource1" class="com.atomikos.jdbc.AtomikosDataSourceBean"
		init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="masterDBUniqueName" />
		<property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="minPoolSize">
			<value>1</value>
		</property>
		<property name="maxPoolSize">
			<value>5</value>
		</property>
		<property name="xaProperties">
			<props>
				<prop key="url">jdbc:mysql://localhost:3306/eyas_test1?characterEncoding=utf8</prop>
				<prop key="user">root</prop>
				<prop key="password"></prop>
				<!-- <prop key="pinGlobalTxToPhysicalConnection">false</prop> -->
			</props>
		</property>
	</bean>
	<bean id="dataSource2" class="com.atomikos.jdbc.AtomikosDataSourceBean"
		init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="slaveDBUniqueName" />
		<property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="minPoolSize">
			<value>10</value>
		</property>
		<property name="maxPoolSize">
			<value>50</value>
		</property>
		<property name="xaProperties">
			<props>
				<prop key="url">jdbc:mysql://localhost:3306/jbpm?characterEncoding=utf8</prop>
				<prop key="user">root</prop>
				<prop key="password"></prop>
			</props>
		</property>
	</bean>
<!-- 	<bean id="dataSource1" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
<!-- 		<property name="jndiName"> -->
<!-- 			<value>java:comp/env/jndi/mysqldatasource1</value> -->
<!-- 		</property> -->
<!-- 	</bean> -->
<!-- 	<bean id="dataSource2" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
<!-- 		<property name="jndiName"> -->
<!-- 			<value>java:comp/env/jndi/mysqldatasource2</value> -->
<!-- 		</property> -->
<!--  	</bean> -->
	<!-- Construct Atomikos UserTransactionManager, needed to configure Spring -->
	<bean id="AtomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close" depends-on="userTransactionService">

		<!-- IMPORTANT: disable startup because the userTransactionService above 
			does this -->
		<property name="startupTransactionService" value="false" />

		<!-- when close is called, should we force transactions to terminate or 
			not? -->
		<property name="forceShutdown" value="false" />
	</bean>

	<!-- Also use Atomikos UserTransactionImp, needed to configure Spring -->
	<bean id="AtomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp"
		depends-on="userTransactionService">
		<property name="transactionTimeout" value="300" />
	</bean>

	<!-- Configure the Spring framework to use JTA transactions from Atomikos -->
	<bean id="txManager"
		class="org.springframework.transaction.jta.JtaTransactionManager"
		depends-on="userTransactionService">
		<property name="transactionManager" ref="AtomikosTransactionManager" />
		<property name="userTransaction" ref="AtomikosUserTransaction" />
	</bean>
	
	
	<!-- mybatis session factory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="databaseIdProvider">
			<null />
		</property>
		<property name="dataSource" ref="dataSource1" />
		<property name="configLocation" value="classpath:resources/sql/mybatis-config.xml" />
	</bean>
	<bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="databaseIdProvider">
			<null />
		</property>
		<property name="dataSource" ref="dataSource2" />
		<property name="configLocation" value="classpath:resources/sql/mybatis-config.xml" />
	</bean>
	<bean id="userTransactionService" class="com.atomikos.icatch.config.UserTransactionServiceImp"
		init-method="init" destroy-method="shutdownForce">
		<constructor-arg>
			<!-- IMPORTANT: specify all Atomikos properties here -->
			<props>
				<prop key="com.atomikos.icatch.service">
					com.atomikos.icatch.standalone.UserTransactionServiceFactory
				</prop>
			</props>
		</constructor-arg>
	</bean>
	
</beans>